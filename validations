package com.yourcompany.validator;

import java.util.Objects;

/**
 * Utility class for sanitizing and validating account name fields
 * based on account type.
 */
public final class BpsAccountNameValidator {

    private static final String FORBIDDEN_CHAR_PATTERN = "[~!@#$%^*()\\-_=+{}\\[\\]|\\\\/:;<>.,?'\"&]";
    private static final int MAX_LENGTH = 30;
    private static final String DEFAULT_NAME = "-";
    private static final String EMPTY_PLACEHOLDER = " ";

    // Private constructor to prevent instantiation
    private BpsAccountNameValidator() {}

    /**
     * Sanitizes and validates the name-related fields of the given AccountMessage.
     * This is the only method you need to call after consuming a message.
     *
     * @param accountMessage the AccountMessage object to be sanitized and validated
     */
    public static void sanitizeAndValidate(AccountMessage accountMessage) {
        if (accountMessage == null) {
            return;
        }

        String accountType = normalize(accountMessage.getAccountType());

        handleFirstName(accountMessage, accountType);
        handleLastName(accountMessage, accountType);

        // Sanitize all name fields after applying validation defaults
        accountMessage.setServiceCustomerFirstName(sanitize(accountMessage.getServiceCustomerFirstName()));
        accountMessage.setServiceCustomerLastName(sanitize(accountMessage.getServiceCustomerLastName()));
        accountMessage.setBillingCustomerFirstName(sanitize(accountMessage.getBillingCustomerFirstName()));
        accountMessage.setBillingCustomerLastName(sanitize(accountMessage.getBillingCustomerLastName()));
    }

    // Helper to apply first name rules based on account type
    private static void handleFirstName(AccountMessage accountMessage, String accountType) {
        boolean isFirstNameEmpty = isEmpty(accountMessage.getServiceCustomerFirstName());

        switch (accountType) {
            case "res":
            case "":
                if (isFirstNameEmpty) {
                    accountMessage.setServiceCustomerFirstName(DEFAULT_NAME);
                }
                break;
            case "com":
                if (isEmpty(accountMessage.getBillingCustomerFirstName())) {
                    accountMessage.setServiceCustomerFirstName(DEFAULT_NAME);
                }
                break;
            default:
                break;
        }
    }

    // Helper to apply last name rules based on account type
    private static void handleLastName(AccountMessage accountMessage, String accountType) {
        boolean isLastNameEmpty = isEmpty(accountMessage.getServiceCustomerLastName());

        switch (accountType) {
            case "res":
            case "":
                if (isLastNameEmpty) {
                    accountMessage.setServiceCustomerLastName(DEFAULT_NAME);
                }
                break;
            case "com":
                if (isEmpty(accountMessage.getBillingCustomerLastName())) {
                    if (isEmpty(accountMessage.getServiceCompanyName())) {
                        accountMessage.setServiceCustomerLastName(DEFAULT_NAME);
                    } else {
                        accountMessage.setServiceCustomerLastName(accountMessage.getServiceCompanyName());
                    }
                }
                break;
            default:
                break;
        }
    }

    /**
     * Sanitizes a string by removing disallowed characters,
     * trimming, and truncating to a max length.
     *
     * @param input the raw name string
     * @return the sanitized string (never null)
     */
    private static String sanitize(String input) {
        if (isEmpty(input)) {
            return EMPTY_PLACEHOLDER;
        }

        String cleaned = input.replaceAll(FORBIDDEN_CHAR_PATTERN, "").trim();
        return cleaned.length() > MAX_LENGTH ? cleaned.substring(0, MAX_LENGTH) : cleaned;
    }

    private static boolean isEmpty(String value) {
        return value == null || value.trim().isEmpty();
    }

    private static String normalize(String value) {
        return value == null ? "" : value.trim().toLowerCase();
    }
}
